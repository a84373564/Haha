import json
import shutil
from pathlib import Path

MAX_HISTORY = 1000
MAX_LOGS = 0
MAX_ARCHIVES = 0

def score_memory(entry):
    score = 0
    if entry.get("return_pct", 0) > 0: score += 1
    if entry.get("win_rate", 0) > 50: score += 1
    if entry.get("sharpe", 0) > 1: score += 1
    if entry.get("drawdown", 100) < 5: score += 1
    if entry.get("net_profit", 0) > 0: score += 1
    return score

# 路徑
mem_path = Path("~/Killcore/king_memory.json").expanduser()
archive_path = Path("~/Killcore/archives").expanduser()
log_path = Path("~/Killcore/logs").expanduser()

if not mem_path.exists():
    raise FileNotFoundError("找不到 king_memory.json")
memory = json.loads(mem_path.read_text())

# 自動補欄
required_fields = {
    "live_rounds": 0,
    "fail_indicators_count": {},
    "history": [],
    "style_profile": None,
    "learning_score": 0,
    "memory_flags": {},
    "aging_map": {},
    "fail_pattern_stats": {},
    "evolution_trace": []
}
for k, default in required_fields.items():
    if k not in memory:
        memory[k] = default

# 保護演化風格與意圖（血統）
protected_indices = set()
seen_styles = set()
seen_intents = set()
for trace in memory.get("evolution_trace", []):
    style = trace.get("style_profile")
    intent = tuple(trace.get("intent", []))
    gen = trace.get("generation")
    if style and style not in seen_styles:
        seen_styles.add(style)
        protected_indices.add(gen)
    if intent and intent not in seen_intents:
        seen_intents.add(intent)
        protected_indices.add(gen)

# 打分與選擇
scored = []
for i, h in enumerate(memory["history"]):
    gen = h.get("generation", i)
    score = score_memory(h)
    is_protected = gen in protected_indices or score >= 4
    scored.append((i, h, score, is_protected))

scored.sort(key=lambda x: (x[3], x[2]), reverse=True)
final_pool = scored[:MAX_HISTORY]
final_indices = {i for i, _, _, _ in final_pool}

S, A, B = [], [], []
new_history, aging_map = [], {}
for i, h in enumerate(memory["history"]):
    score = score_memory(h)
    if i in final_indices:
        new_history.append(h)
        if score >= 4: S.append(i)
        elif score == 3: A.append(i)
        else: B.append(i)
    else:
        aging_map[str(i)] = f"淘汰（score={score}）"

memory["history"] = new_history
memory["aging_map"] = aging_map

# 清理檔案（logs 和 archives 全砍）
def clean_folder(path: Path, keep: int):
    if not path.exists(): return
    files = sorted(path.iterdir(), key=lambda f: f.stat().st_mtime, reverse=True)
    for f in files[keep:]:
        try:
            if f.is_file() or f.is_symlink():
                f.unlink()
            elif f.is_dir():
                shutil.rmtree(f)
        except Exception as e:
            print(f"刪除失敗 {f}: {e}")

clean_folder(archive_path, MAX_ARCHIVES)
clean_folder(log_path, MAX_LOGS)

# 儲存
mem_path.write_text(json.dumps(memory, indent=2, ensure_ascii=False))

# 結果
print("── 模組 11：記憶階層清理完成（logs + archives 完全清空）──")
print(f"S級保留：{len(S)}, A級保留：{len(A)}, B級淘汰：{len(B)}")
print(f"融合後記憶保留數：{len(memory['history'])}")
print(f"進化紀錄數：{len(memory['evolution_trace'])}")
print(f"aging_map 長度：{len(memory['aging_map'])}")
